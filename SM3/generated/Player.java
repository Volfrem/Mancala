/*
 * generated by Fujaba - CodeGen2
 */
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import java.util.*;
import de.upb.tools.fca.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath


public class Player
{



   /**
    * <pre>
    *           0..1     is on hand     0..*
    * Player ------------------------- Card
    *           player               card
    * </pre>
    */
   public static final String PROPERTY_CARD = "card";

   @Property( name = PROPERTY_CARD, partner = Card.PROPERTY_PLAYER, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.PARENT)
   private FHashSet<Card> card;

   @Property( name = PROPERTY_CARD )
   public Set<? extends Card> getCard()
   {
      return ((this.card == null)
              ? Collections.EMPTY_SET
              : Collections.unmodifiableSet(this.card));
   }

   @Property( name = PROPERTY_CARD )
   public boolean addToCard (Card value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.card == null)
         {
            this.card = new FHashSet<Card> ();

         }
      
         changed = this.card.add (value);
         if (changed)
         {
            value.setPlayer (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CARD )
   public Player withCard (Card value)
   {
      addToCard (value);
      return this;
   }

   public Player withoutCard (Card value)
   {
      removeFromCard (value);
      return this;
   }


   public boolean removeFromCard (Card value)
   {
      boolean changed = false;

      if ((this.card != null) && (value != null))
      {
      
         changed = this.card.remove (value);
         if (changed)
         {
            value.setPlayer (null);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CARD )
   public void removeAllFromCard (){
   
      Card tmpValue;
      Iterator<? extends Card> iter = this.iteratorOfCard ();
      while (iter.hasNext ())
      {
         tmpValue = (Card) iter.next ();
         this.removeFromCard (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_CARD )
   public boolean hasInCard (Card value)
   {
      return ((this.card != null) &&
              (value != null) &&
              this.card.contains (value));
   }

   @Property( name = PROPERTY_CARD )
   public Iterator<? extends Card> iteratorOfCard ()
   {
      return ((this.card == null)
              ? FEmptyIterator.<Card>get ()
              : this.card.iterator ());
   }

   @Property( name = PROPERTY_CARD )
   public int sizeOfCard ()
   {
      return ((this.card == null)
              ? 0
              : this.card.size ());
   }

   public static final String PROPERTY_IS_DEALER = "isDealer";

   @Property( name = PROPERTY_IS_DEALER, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private boolean isDealer;

   @Property( name = PROPERTY_IS_DEALER )
   public void setIsDealer (boolean value)
   {
      this.isDealer = value;
   }

   public Player withIsDealer (boolean value)
   {
      setIsDealer (value);
      return this;
   }

   @Property( name = PROPERTY_IS_DEALER )
   public boolean isIsDealer ()
   {
      return this.isDealer;
   }

   public static final String PROPERTY_NAME = "name";

   @Property( name = PROPERTY_NAME, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private String name;

   @Property( name = PROPERTY_NAME )
   public void setName (String value)
   {
      this.name = value;
   }

   public Player withName (String value)
   {
      setName (value);
      return this;
   }

   @Property( name = PROPERTY_NAME )
   public String getName ()
   {
      return this.name;
   }

   public void playCard (Card card )
   {
      boolean fujaba__Success = false;
      Card openDeckCard = null;
      OpenDeck openDeck = null;
      Card odCardTop = null;
      Player rightPlayer = null;
      Deck deck = null;
      Card deckCard = null;
      Card deckTopCard = null;
      Iterator fujaba__IterDeckToDeckCard = null;
      Card topCard = null;
      Card secondCard = null;
      Player nextPlayer = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check object card is really bound
         JavaSDM.ensure ( card != null );
         // check link is on hand from card to this
         JavaSDM.ensure (this.equals (card.getPlayer ()));

         // create object openDeckCard
         openDeckCard = new Card ( );

         // create object openDeck
         openDeck = OpenDeck.getInstance();

         // create object odCardTop
         odCardTop = new Card ( );

         // create link is on from openDeck to openDeckCard
         openDeck.setCard (openDeckCard);

         // create link onTop from odCardTop to openDeckCard
         odCardTop.setCard (openDeckCard);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( (card.getSuite()==openDeck.getCurrentSuite()) || card.getSuite()=="Jack" ) )
      {
         return ;

      }
      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         // check object card is really bound
         JavaSDM.ensure ( card != null );
         // check object openDeck is really bound
         JavaSDM.ensure ( openDeck != null );
         // check object openDeckCard is really bound
         JavaSDM.ensure ( openDeckCard != null );
         // check isomorphic binding between objects openDeckCard and card
         JavaSDM.ensure ( !openDeckCard.equals (card) );

         // check link is on hand from card to this
         JavaSDM.ensure (this.equals (card.getPlayer ()));

         // assign attribute openDeck
         openDeck.setCurrentSuite (card.getSuite());
         // destroy link is on hand from this to card
         this.removeFromCard (card);
         // assign attribute card
         card.setIsTop (true);
         // assign attribute openDeckCard
         openDeckCard.setIsTop (false);
         // create link is on from card to openDeck
         card.setOpenDeck (openDeck);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( card.getValue()=="7" )
      {
         // story pattern successor
         try 
         {
            fujaba__Success = false; 

            // create object rightPlayer
            rightPlayer = new Player ( );

            // create object deck
            deck = Deck.getInstance();

            // create object deckCard
            deckCard = new Card ( );

            // create object deckTopCard
            deckTopCard = new Card ( );

            // create link sits right of from this to rightPlayer
            this.setPlayer (rightPlayer);

            // create link is on top of from deckCard to deck
            deckCard.setDeck (deck);

            // create link onTop from deckTopCard to deckCard
            deckTopCard.setCard (deckCard);

            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         if ( !( fujaba__Success ) )
         {
            return ;

         }
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // check object deck is really bound
            JavaSDM.ensure ( deck != null );
            // check object rightPlayer is really bound
            JavaSDM.ensure ( rightPlayer != null );
            // iterate to-many link is on top of from deck to deckCard
            fujaba__Success = false;
            fujaba__IterDeckToDeckCard = deck.iteratorOfCard ();

            while ( !(fujaba__Success) && fujaba__IterDeckToDeckCard.hasNext () )
            {
               try
               {
                  deckCard = (Card) fujaba__IterDeckToDeckCard.next ();

                  // check object deckCard is really bound
                  JavaSDM.ensure ( deckCard != null );

                  fujaba__Success = true;
               }
               catch ( JavaSDMException fujaba__InternalException )
               {
                  fujaba__Success = false;
               }
            }
            JavaSDM.ensure (fujaba__Success);
            // destroy link is on top of from deckCard to deck
            deckCard.setDeck (null);
            // destroy link onTop from topCard to secondCard
            topCard.setCard (null);
            // create object topCard
            topCard = new Card ( );

            // create object secondCard
            secondCard = new Card ( );

            // assign attribute deckCard
            deckCard.setIsTop (false);
            // assign attribute topCard
            topCard.setIsTop (true);
            // create link is on top of from topCard to deck
            topCard.setDeck (deck);

            // create link is on hand from rightPlayer to deckCard
            rightPlayer.addToCard (deckCard);

            // create link onTop from secondCard to deckCard
            secondCard.setCard (deckCard);

            // create link is on hand from secondCard to rightPlayer
            secondCard.setPlayer (rightPlayer);

            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         if ( fujaba__Success )
         {
            return ;

         }
         return ;

      }
      if ( card.getValue()=="8" )
      {
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // create object rightPlayer
            rightPlayer = new Player ( );

            // create object nextPlayer
            nextPlayer = new Player ( );

            // assign attribute this
            this.setTurn (false);
            // assign attribute rightPlayer
            rightPlayer.setTurn (false);
            // assign attribute nextPlayer
            nextPlayer.setTurn (true);
            // create link sits right of from rightPlayer to this
            rightPlayer.setPlayer (this);

            // create link sits right of from nextPlayer to rightPlayer
            nextPlayer.setPlayer (rightPlayer);

            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         if ( !( fujaba__Success ) )
         {
            return ;

         }
         return ;

      }
      if ( !( card.getValue()=="J" ) )
      {
         return ;

      }
      // story pattern successor
      try 
      {
         fujaba__Success = false; 

         // create object openDeck
         openDeck = OpenDeck.getInstance();

         // assign attribute openDeck
         openDeck.setCurrentSuite (card.getSuite());
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( !( fujaba__Success ) )
      {
         return ;

      }
      return ;
   }

   /**
    * <pre>
    *           0..1     sits right of     0..1
    * Player ------------------------- Player
    *           player               player
    * </pre>
    */
   public static final String PROPERTY_PLAYER = "player";

   @Property( name = PROPERTY_PLAYER, partner = Player.PROPERTY_PLAYER, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player player;

   @Property( name = PROPERTY_PLAYER )
   public boolean setPlayer (Player value)
   {
      boolean changed = false;

      if (this.player != value)
      {
      
         Player oldValue = this.player;
         Player source = this;
         if (this.player != null)
         {
            this.player = null;
            oldValue.setPlayer (null);
         }
         this.player = value;

         if (value != null)
         {
            value.setPlayer (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PLAYER )
   public Player withPlayer (Player value)
   {
      setPlayer (value);
      return this;
   }

   public Player getPlayer ()
   {
      return this.player;
   }

   public static final String PROPERTY_TURN = "turn";

   @Property( name = PROPERTY_TURN, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private boolean turn;

   @Property( name = PROPERTY_TURN )
   public void setTurn (boolean value)
   {
      this.turn = value;
   }

   public Player withTurn (boolean value)
   {
      setTurn (value);
      return this;
   }

   @Property( name = PROPERTY_TURN )
   public boolean isTurn ()
   {
      return this.turn;
   }

   public void removeYou()
   {
      this.removeAllFromCard ();
      this.setPlayer (null);
   }
}


